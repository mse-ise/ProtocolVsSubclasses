Assignment 1 - Protocol and Subclasses in Objective - C
===========================================================

PROTOCOL
---------
In Objective-C, a particular class only has one parent, and its parent has one parent, and so on right up 
to the root object (NSObject).But what if your class needs to call methods on objects outside of its parent tree? 
A protocol is one way Objective-C solves this problem.A protocol is a list of method declarations. 
If your class adopts the protocol, then you have to implement those methods in your class.
In Objective-C 2.0 and later, some protocol methods can be marked as optional. 
This means you don't have to implement those, but you still have to implement all of the required methods. 
When you do, your class is said to conform to the protocol.Protocols are used quite a bit in iPhone development. 
For instance, a UITableView requires a data source and a delegate object;these must conform to the UITableViewDataSource and UITableViewDelegate protocols.

To adopt a protocol, add it to your class header file:
"@interface FavoritesViewController : UIViewController <UITableViewDelegate, UITableViewDataSource> " 

The protocol names appear after the class declaration, inside angled brackets. 
When adopting more than one protocol, list them in a comma-separated list.
Then in your implementation (.m) file, implement all of the required methods for each protocol.

SUBCLASSES
-------------
Every object you create descends from the 'NSObject' foundation class. 
The NSObject class identifies properties and methods which apply to all objects.  
The NSObject class is divided into smaller groups of objects, called subclasses.  
Objects in these subclasses not only conform to the protocol of NSObject, they are also defined more precisely by 
the methods that govern their subclass.  Every object class inherits from the superclasses above it in the object hierarchy, and also declares the methods which make it a unique class.

Why we need subclass?

There are three primary reasons that your application may have to use subclasses...

1) ASStudio does not support all of the capabilities available to developers using other languages like Objective-C or java.  Unfortunately, the dictionaries that govern which objects and methods you have access to in ASStudio are not complete. Leaving gaps in feature support that range from trivial to severe.  To gain access to these features, you must write custom subclasses that add the unsupported code you need.

2) You may want to override the methods in existing classes.  Some objects have default methods and settings 
that may not be suitable for your needs.  By creating a custom subclass, you can set your interface elements 
to inherit qualities according to your criteria, not just from the object's default class implementation.  

3) It is often beneficial to create your own generic subclasses, to act as a convenient location to keep 
]any methods you write that execute custom Objective-C code.  In many cases, Objective-C has methods of 
performing certain actions or managing data in ways that Applescript is not capable of.  
Objective-C has a versatile set of existing methods that you can use to make your application work more 
efficiently and effectively.

